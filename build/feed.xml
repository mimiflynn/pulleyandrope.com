<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>   
    <title>Pulley and Rope</title>
    <atom:link href="http://localhost:8080/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://localhost:8080</link>
    <description>What it is?!</description>
    <pubDate>Sat, 13 Apr 2013 15:12:00 -0400</pubDate>
    <generator>The mighty Wintersmith</generator>
    <language>en</language>
    <item>
      <title>Interesting Links</title>
      <link>http://localhost:8080/articles/interesting-links/</link>
      <pubDate>Sat, 13 Apr 2013 15:12:00 -0400</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/interesting-links/</guid>
      <author></author>
      <description>&lt;h1&gt;Interesting Links&lt;/h1&gt;
&lt;p&gt;The following is a Gist I created to keep track of all of the interesting articles I have come across that I&apos;m sure will end up in conversation in the future.

&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mimiflynn/4612084.js&quot;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>And so we begin</title>
      <link>http://localhost:8080/articles/begin/</link>
      <pubDate>Sat, 16 Feb 2013 15:12:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/begin/</guid>
      <author></author>
      <description>&lt;h1&gt;And so we begin&lt;/h1&gt;
&lt;p&gt;I purchased this domain name on a whim, with no prior googling to see if the url had a meme attached to it. I bought my server space also on a whim, so, here we are, on the internet, you and me, interacting in a way previously unplanned.

&lt;/p&gt;
&lt;p&gt;Today, I spent a small amount of time at with people from &lt;a href=&quot;http://braininterfacelab.wordpress.com&quot; title=&quot;hack a brain&quot;&gt;Brain Interface Labs&lt;/a&gt; at the &lt;a href=&quot;http://braininterfacelab.wordpress.com/2013/02/08/hack-a-brain/&quot; title=&quot;hack a brain&quot;&gt;hack a brain&lt;/a&gt; event. It was particularly interesting and got me wondering about the theraputic potentials of a brain interface device. Had a hard day? Stare at these pretty lights for a bit with this headset on. Just wait and see what happens.

&lt;/p&gt;
&lt;p&gt;In other news, I&apos;m attempting to use the fancy &lt;a href=&quot;https://github.com/darwin/cmx.js&quot; title=&quot;cmx.js github&quot;&gt;cmx.js&lt;/a&gt; project to start a comic blog at &lt;a href=&quot;http://iwaspromisedcookies.com&quot; title=&quot;I was promised cookies&quot;&gt;iwaspromisedcookies.com&lt;/a&gt; to document the crazy conversations I tend to overhear in New York City. Hopefully, I&apos;ll be able to keep it up ;)

&lt;/p&gt;
&lt;p&gt;The blog is powered by &lt;a href=&quot;http://jnordberg.github.com/wintersmith/&quot; title=&quot;wintersmith on github&quot;&gt;Wintersmith&lt;/a&gt;, btw. It is a static page generator built on nodejs and its amazing and I love it so far.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Dinner</title>
      <link>http://localhost:8080/articles/dinner/</link>
      <pubDate>Sat, 16 Feb 2013 15:12:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/dinner/</guid>
      <author></author>
      <description>&lt;h1&gt;Dinner&lt;/h1&gt;
&lt;p&gt;This evening began with wine and pasta at our favorite Italian restaurant in Park Slope. The space filled up quickly, so another couple was seated right next to us, in a fashion that would usually be reserved for groups of people that actually know each other.

&lt;/p&gt;
&lt;p&gt;It must have been a little awkward for them to be seated so closely to another couple that was clearly in the middle of random and empty couple talk. As we chatted about our future plans, goofy work stories, and friend gossip, it became apparent that the other couple was not only listening in to our conversation but talking about and making fun of it. They were making snotty remarks about our wine fueled chitchat not even six inches away from us leading us to wonder if it was possible, that after one glass of wine, were we the loud talking assholes or were they.

&lt;/p&gt;
&lt;p&gt;We will never know.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Untitled</title>
      <link>http://localhost:8080/articles/readme/</link>
      <pubDate>Wed, 31 Dec 1969 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/readme/</guid>
      <author></author>
      <description>&lt;p&gt;A flexible static site generator â€“ &lt;a href=&quot;http://jnordberg.github.com/wintersmith/&quot;&gt;http://jnordberg.github.com/wintersmith/&lt;/a&gt;

&lt;/p&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Easy to use&lt;/li&gt;
&lt;li&gt;Generated sites can be hosted anywhere (output is plain html)&lt;/li&gt;
&lt;li&gt;Write articles/pages using markdown&lt;/li&gt;
&lt;li&gt;Robust templating using &lt;a href=&quot;https://github.com/visionmedia/jade&quot;&gt;Jade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Preview server (no need to rebuild every time you make a change)&lt;/li&gt;
&lt;li&gt;Highly configurable&lt;/li&gt;
&lt;li&gt;Extendable using &lt;a href=&quot;https://github.com/jnordberg/wintersmith/wiki/Plugins&quot;&gt;plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;FAST!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Quick-start&lt;/h2&gt;
&lt;p&gt;First install wintersmith using &lt;a href=&quot;http://npmjs.org/&quot;&gt;npm&lt;/a&gt;:

&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ npm install wintersmith -g&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will install wintersmith globally on your system so that you can access the &lt;code&gt;wintersmith&lt;/code&gt; command from anywhere. Once that is complete run:

&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ wintersmith &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;path&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where &lt;code&gt;&lt;path&gt;&lt;/code&gt; is the location you want the site to be generated. This creates a skeleton site with a basic set of templates and some articles, while not strictly needed it&apos;s a good starting point.

&lt;/p&gt;
&lt;p&gt;Now enter the directory and start the preview server:

&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ cd &lt;path&gt;
$ wintersmith preview&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point you are ready to start customizing your site. Point your browser to &lt;code&gt;http://localhost:8080&lt;/code&gt; and start editing templates and articles.

&lt;/p&gt;
&lt;p&gt;When done run:

&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ wintersmith build&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This generates your site and places it in the &lt;code&gt;build/&lt;/code&gt; directory - all ready to be copied to your web server!

&lt;/p&gt;
&lt;p&gt;And remember to give the old &lt;code&gt;--help&lt;/code&gt; a look :-)

&lt;/p&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;A wintersmith site is built up of two main components, contents and templates.

&lt;/p&gt;
&lt;p&gt;Contents is a directory where all the sites raw material goes (markdown files, images, javascript etc). This directory is then scanned to produce what&apos;s internally called a ContentTree.

&lt;/p&gt;
&lt;p&gt;The ContentTree is a nested object built up of ContentPlugins and looks something like this:

&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;{
  &lt;span class=&quot;string&quot;&gt;&quot;myfile.md&quot;&lt;/span&gt;: {MarkdownPlugin} &lt;span class=&quot;comment&quot;&gt;// plugin instance, subclass of ContentPlugin&lt;/span&gt;
  &lt;span class=&quot;string&quot;&gt;&quot;some-dir/&quot;&lt;/span&gt;: { &lt;span class=&quot;comment&quot;&gt;// another ContentTree instance&lt;/span&gt;
    &lt;span class=&quot;string&quot;&gt;&quot;image.jpg&quot;&lt;/span&gt;: {StaticPlugin}
    &lt;span class=&quot;string&quot;&gt;&quot;random.file&quot;&lt;/span&gt;: {StaticPlugin}
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This content tree is provided in full to all plugins in turn when rendering. This gives you a lot of flexibility when writing plugins, you could for example write a plugin that generates a mosaic using images located in a specific directory.

&lt;/p&gt;
&lt;p&gt;Wintersmith comes with a default Page plugin that renders markdown content using templates. This plugin takes markdown (combined with some metadata, more on this later) compiles it and provides it to a template along with the content tree and some utility functions.

&lt;/p&gt;
&lt;p&gt;This brings us to the second component, the template directory. All templates found in this directory are loaded and are also passed to the content plugins when rendering.

&lt;/p&gt;
&lt;p&gt;By default only &lt;code&gt;.jade&lt;/code&gt; templates are loaded, but you can easily add template plugins to use a template engine of your choosing.

&lt;/p&gt;
&lt;p&gt;Check the &lt;code&gt;examples/&lt;/code&gt; directory for some inspiration on how you can use wintersmith or the &lt;a href=&quot;https://github.com/jnordberg/wintersmith/wiki/Showcase&quot;&gt;showcase&lt;/a&gt; to see what others are doing.

&lt;/p&gt;
&lt;h2&gt;Config&lt;/h2&gt;
&lt;p&gt;Configuration can be done with command-line options, a config file or both. The config file will be looked for as &lt;code&gt;config.json&lt;/code&gt; in the root of your site (you can set a custom path using &lt;code&gt;--config&lt;/code&gt;).

&lt;/p&gt;
&lt;h3&gt;Options&lt;/h3&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Name&lt;/th&gt;
    &lt;th&gt;Default&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;output&lt;/td&gt;
    &lt;td&gt;./build&lt;/td&gt;
    &lt;td&gt;output directory, this is where the generated site is output&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;contents&lt;/td&gt;
    &lt;td&gt;./contents&lt;/td&gt;
    &lt;td&gt;contents directory, where to look for site contents (markdown, images, etc)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;templates&lt;/td&gt;
    &lt;td&gt;./templates&lt;/td&gt;
    &lt;td&gt;template directory, where to look for templates&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;locals&lt;/td&gt;
    &lt;td&gt;{}&lt;/td&gt;
    &lt;td&gt;javascript object to pass to all templates when rendering, useful for storing metadata for your site. can also be a path to a json file&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;require&lt;/td&gt;
    &lt;td&gt;[]&lt;/td&gt;
    &lt;td&gt;list of modules to load and provide to the template context&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;plugins&lt;/td&gt;
    &lt;td&gt;[]&lt;/td&gt;
    &lt;td&gt;list of plugin modules to load&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;ignore&lt;/td&gt;
    &lt;td&gt;[]&lt;/td&gt;
    &lt;td&gt;list of files/globpatterns in contents to ignore&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;All paths can either be relative or absolute. Relative paths will be resolved from the current directory or &lt;code&gt;--chdir&lt;/code&gt; if set.

&lt;/p&gt;
&lt;h2&gt;The Page plugin&lt;/h2&gt;
&lt;p&gt;A page is either a markdown file with metadata on top or a json file located in the contents directory.

&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;markdown&quot;&gt;---
title: My first post
date: 2012-12-12 12:12
author: John Hjort &lt;foo@bar.com&gt;
template: article.jade
----

# Hello friends!

Life is wonderful, isn't it?&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or use json to simply pass metadata to a template:

&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;{
  &quot;template&quot;: &quot;template.jade&quot;,
  &quot;meta&quot;: {
      &quot;greta&quot;: 123,
      &quot;peta&quot;: [1, 2, 3]
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pages will be rendered as html, so for example &lt;code&gt;index.md&lt;/code&gt; would be rendered to &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;some-dir/data.json&lt;/code&gt; to &lt;code&gt;some-dir/data.html&lt;/code&gt;.

&lt;/p&gt;
&lt;h3&gt;Links&lt;/h3&gt;
&lt;p&gt;All relative links in the markdown will be resolved correctly when rendering. This means you can just place &lt;em&gt;image.png&lt;/em&gt; in the same directory and simply include it in your markdown as &lt;code&gt;![my image](image.png)&lt;/code&gt;

&lt;/p&gt;
&lt;p&gt;This is especially convenient when using a markdown editor (read &lt;a href=&quot;http://mouapp.com/&quot;&gt;Mou&lt;/a&gt; if you&apos;re on a mac).

&lt;/p&gt;
&lt;h3&gt;Metadata&lt;/h3&gt;
&lt;p&gt;Metadata is parsed using &lt;a href=&quot;https://github.com/nodeca/js-yaml&quot;&gt;js-yaml&lt;/a&gt; and will be accessible in the template as &lt;code&gt;page.metadata&lt;/code&gt;.

&lt;/p&gt;
&lt;p&gt;There are two special metadata keys, The first one is &lt;code&gt;template&lt;/code&gt; which specifies what template to render the page with. If the key is omitted or set to &lt;code&gt;none&lt;/code&gt; the page will not be rendered (but still available in the content tree).

&lt;/p&gt;
&lt;p&gt;The second one is &lt;code&gt;filename&lt;/code&gt; which can be used to override the output filename of the page. Useful if you need to output a &lt;code&gt;.xml&lt;/code&gt; file or something similar.

&lt;/p&gt;
&lt;h3&gt;Templates&lt;/h3&gt;
&lt;p&gt;When a page is rendered to a template the page instance is available as &lt;code&gt;page&lt;/code&gt; in the template context. The content tree is also available as &lt;code&gt;contents&lt;/code&gt; and the config.locals object as &lt;code&gt;locals&lt;/code&gt;.

&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://documentcloud.github.com/underscore/&quot;&gt;underscore.js&lt;/a&gt; is also available as &lt;code&gt;_&lt;/code&gt; to provide some utility to aid you sorting and filtering the content tree.

&lt;/p&gt;
&lt;h3&gt;The Page model&lt;/h3&gt;
&lt;p&gt;The Page model (inherits from ContentPlugin)

&lt;/p&gt;
&lt;p&gt;Properties:

&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;metadata&lt;/td&gt;
    &lt;td&gt;the metadata object&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;title&lt;/td&gt;
    &lt;td&gt;&lt;code&gt;metadata.title&lt;/code&gt; or &lt;code&gt;Untitled&lt;/code&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;date&lt;/td&gt;
    &lt;td&gt;Date object from &lt;code&gt;metadata.date&lt;/code&gt; if set or unix epoch time&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;rfc822date&lt;/td&gt;
    &lt;td&gt;a rfc-822 formatted string made from &lt;code&gt;date&lt;/code&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;body&lt;/td&gt;
    &lt;td&gt;unparsed markdown content&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;html&lt;/td&gt;
    &lt;td&gt;parsed markdown content&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2&gt;Writing plugins&lt;/h2&gt;
&lt;p&gt;Wintersmith has two types of plugins, content plugins that transform contents and template plugins that are provided to the content plugins to help render contents.

&lt;/p&gt;
&lt;p&gt;A list of 3rd party plugins can be found on &lt;a href=&quot;https://github.com/jnordberg/wintersmith/wiki/Plugins&quot;&gt;the wiki&lt;/a&gt;.


&lt;/p&gt;
&lt;h3&gt;Content Plugins&lt;/h3&gt;
&lt;p&gt;A content plugin is a subclass of &lt;code&gt;ContentPlugin&lt;/code&gt; and should provide a &lt;code&gt;fromFile&lt;/code&gt; class method, a &lt;code&gt;render&lt;/code&gt; instance method and a &lt;code&gt;getFilename&lt;/code&gt; instance method.

&lt;/p&gt;
&lt;p&gt;&lt;code&gt;render&lt;/code&gt; is called with the content tree, template list, locals and a callback. Have a look in &lt;code&gt;src/contents.coffee&lt;/code&gt; it&apos;s pretty well documented.

&lt;/p&gt;
&lt;p&gt;Content plugins are registered using the &lt;code&gt;registerContentPlugin&lt;/code&gt; function.

&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th colspan=2&gt;registerContentPlugin(group, pattern, plugin)&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;group&lt;/td&gt;
    &lt;td&gt;
      &lt;p&gt;&lt;em&gt;string&lt;/em&gt; - plugin group name

      &lt;p&gt;Groups are used to easily access a specific type of content in the tree. The content tree has a special property &lt;code&gt;&lt;em&gt;&lt;/code&gt; that returns a object with all plugin groups as &lt;code&gt;{groupname: [pluginInstance, ..], ..}&lt;/code&gt;

      &lt;p&gt;For example you can use &lt;code&gt;contents.somedir.&lt;/em&gt;.pages&lt;/code&gt; to get an array of all pages in a directory.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;pattern&lt;/td&gt;
    &lt;td&gt;
      &lt;p&gt;&lt;em&gt;string&lt;/em&gt; - glob pattern (e.g. &lt;code&gt;&lt;em&gt;*/&lt;/em&gt;.txt&lt;/code&gt;)

      &lt;p&gt;Glob pattern used to match files that should be handled by the plugin. Uses the &lt;a href=&quot;https://github.com/isaacs/minimatch&quot;&gt;minimatch&lt;/a&gt; module.
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;plugin&lt;/td&gt;
    &lt;td&gt;
      &lt;p&gt;&lt;em&gt;class&lt;/em&gt; - the ContentPlugin subclass
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;


&lt;h3&gt;Template Plugins&lt;/h3&gt;
&lt;p&gt;A template plugins is a subclass of &lt;code&gt;TemplatePlugin&lt;/code&gt; and should also provide a &lt;code&gt;fromFile&lt;/code&gt; class method and a &lt;code&gt;render&lt;/code&gt; instance method.

&lt;/p&gt;
&lt;p&gt;Template plugins are registered using:

&lt;/p&gt;
&lt;p&gt;&lt;code&gt;function registerTemplatePlugin(pattern, plugin) { .. }&lt;/code&gt;

&lt;/p&gt;
&lt;p&gt;where &lt;em&gt;pattern&lt;/em&gt; is the glob pattern to match in the template directory and plugin is the plugin subclass.

&lt;/p&gt;
&lt;h3&gt;Plugin Modules&lt;/h3&gt;
&lt;p&gt;The easiest way to load a wintersmith plugin is to use the &lt;code&gt;plugins&lt;/code&gt; config option.

&lt;/p&gt;
&lt;p&gt;Example:

&lt;/p&gt;
&lt;p&gt;&lt;code&gt;myplugin.coffee&lt;/code&gt;

&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;coffeescript&quot;&gt;
module.exports = (wintersmith, callback) -&gt;

  &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; TextPlugin &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; wintersmith.ContentPlugin

    constructor: (@_filename, @_text) -&gt;

    getFilename: -&gt;
      @_filename

    render: (locals, contents, templates, callback) -&gt;
      &lt;span class=&quot;comment&quot;&gt;# do something with the text!&lt;/span&gt;
      callback &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Buffer @_text

  TextPlugin.fromFile = (filename, base, callback) -&gt;
    fs.readFile path.join(base, filename), (error, buffer) -&gt;
      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; error
        callback error
      &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;
        callback &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TextPlugin filename, buffer.toString()

  wintersmith.registerContentPlugin &lt;span class=&quot;string&quot;&gt;'text'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'**/*.txt'&lt;/span&gt;, TextPlugin
  callback() &lt;span class=&quot;comment&quot;&gt;# tell the plugin manager we are done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To use this plugin simply pass the path to the file to the cli tool (&lt;code&gt;--plugins ./myplugin.coffee&lt;/code&gt;)

&lt;/p&gt;
&lt;p&gt;You can also use globally or locally installed modules as plugins.

&lt;/p&gt;
&lt;h2&gt;Using wintersmith programmatically&lt;/h2&gt;
&lt;p&gt;example:

&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wintersmith = &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'wintersmith'&lt;/span&gt;);

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; options = {
  &lt;span class=&quot;string&quot;&gt;'output'&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'/var/www/pub'&lt;/span&gt;,
  &lt;span class=&quot;string&quot;&gt;'contents'&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'/foo/contents'&lt;/span&gt;,
  &lt;span class=&quot;string&quot;&gt;'contents'&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;'/foo/templates'&lt;/span&gt;,
  &lt;span class=&quot;string&quot;&gt;'plugins'&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;'some-plugin'&lt;/span&gt;],
  &lt;span class=&quot;string&quot;&gt;'locals'&lt;/span&gt;: {foo: &lt;span class=&quot;string&quot;&gt;'bar'&lt;/span&gt;}
};

wintersmith(options, callback(error) {
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error) {
    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; error;
  } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
    console.log(&lt;span class=&quot;string&quot;&gt;'great success!'&lt;/span&gt;);
  }
});

&lt;span class=&quot;comment&quot;&gt;// you can also use the api to get the content tree&lt;/span&gt;
wintersmith.loadContents(&lt;span class=&quot;string&quot;&gt;'path/to/contents'&lt;/span&gt;, callback(error, contents) {
  &lt;span class=&quot;comment&quot;&gt;// do something with the content tree&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are more API methods defined, have a look at the source it&apos;s pretty well-commented.

&lt;/p&gt;
&lt;h2&gt;About&lt;/h2&gt;
&lt;p&gt;Wintersmith is written by &lt;a href=&quot;http://johan-nordberg.com&quot;&gt;Johan Nordberg&lt;/a&gt; using &lt;a href=&quot;http://coffeescript.org/&quot;&gt;CoffeeScript&lt;/a&gt; and licensed under the &lt;a href=&quot;http://en.wikipedia.org/wiki/MIT_License&quot;&gt;MIT-license&lt;/a&gt;.

&lt;/p&gt;
&lt;p&gt;The name is a nod to &lt;a href=&quot;https://github.com/flatiron/blacksmith&quot;&gt;blacksmith&lt;/a&gt; which inspired this project (and &lt;a href=&quot;http://www.terrypratchett.co.uk/&quot;&gt;Terry Pratchett&lt;/a&gt; of course).

&lt;/p&gt;
&lt;p&gt;Some of the great node.js modules that wintersmith uses:

&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/caolan/async&quot;&gt;async&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chjj/marked&quot;&gt;marked&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/visionmedia/jade&quot;&gt;jade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jashkenas/coffee-script&quot;&gt;coffee-script&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check the &lt;code&gt;package.json&lt;/code&gt; for a complete list.


&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;Â© 2012 FFFF00 Agents AB&lt;/em&gt;
&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>